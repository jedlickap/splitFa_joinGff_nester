import argparse
from scripts.splitFaByNs_joinGffs import FastaIn, NesterOut

def args_from_parser():
    parser = argparse.ArgumentParser(
        description='''Script performs:\n(i) split of multisequence fasta file
        based on present 'N' bases into multiple sequences,
        and generates table with indexes used for split.\n(ii) 'join' option
        recalculates coordinates from Nester outputed GFFs based on index table 
        and joins them into one final GFF.
        ''')

    requiredNamed = parser.add_argument_group('required named arguments')
    requiredNamed.add_argument(
        "-fa", "--fasta", type=str, required=True,
        help='Input FASTA file'
        )
    requiredNamed.add_argument('-action', '--action_choise', 
                               type=str,
                               choices=['split','join'],
                               help='If \'join\' you must specify \'-nester_output\' and \'-split_indexes\' arguments')
    parser.add_argument('-nester_output', '--nester_data_path', 
                        type=str,
                        help='specify \'/path/to/data\' directory generated by nester')
    parser.add_argument('-split_indexes', '--indexes_table_path', 
                        type=str,
                        help='specify \'/path/to/*ACGT_Indexes.tab\' file')

    args = parser.parse_args()
    # check paths for 'join' argument
    if args.action_choise == 'join' and (args.nester_data_path is None or args.indexes_table_path is None):
        parser.error("--action \'join\' requires --nester_data_path and --indexes_table_path.")
    else:
        return args
    
def main():
    args = args_from_parser()
    if args.action_choise == 'split':
        fasta_obj = FastaIn(args.fasta)
        fasta_obj.split_fa_by_Ns()
    elif args.action_choise == 'join':
        dataPath_obj = NesterOut(args.nester_data_path, args.indexes_table_path)
        dataPath_obj.recalc_and_join()

if __name__=='__main__':
    main()